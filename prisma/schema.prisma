// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(uuid())
  discordId      String      @unique
  username       String
  createdAt      DateTime    @default(now())
  character      Character?
  assets         Asset[]
  gangs          GangMember[]
  ledGangs       Gang[]      @relation("GangLeader")
  inventory      Inventory[]
  actionLogs     ActionLog[]
  robberies      AssetRobberyLog[]
  missions       UserMission[]
  leaderboards   Leaderboard[]
  moneyEvents    MoneyEvent[]
  bankTransactions BankTransaction[]
  cryptoTransactions CryptoTransaction[]
}

model Character {
  id              String   @id @default(uuid())
  name            String
  userId          String   @unique
  stats           Json     // {strength: Int, stealth: Int, intelligence: Int, ...}
  
  // Multi-layered money system
  cashOnHand      Int      @default(0)     // Vulnerable to theft
  bankBalance     Int      @default(0)     // Vulnerable to government
  cryptoWallet    Json     @default("{}")  // {"bitcoin": 1.5, "ethereum": 0.8}
  
  // Banking system
  bankAccessLevel Int      @default(1)     // Unlocks higher limits and better protection
  lastBankVisit   DateTime?
  bankInterestAccrued Float @default(0)
  
  // Jail system
  jailUntil       DateTime? // When the player gets out of jail (null = not in jail)
  jailCrime       String?   // What crime landed them in jail
  jailSeverity    Int       @default(0) // Severity of the crime (affects bribe cost)
  jailBribeAmount Int?      // Fixed bribe amount set when jailed (null = not in jail)
  totalJailTime   Int       @default(0) // Total minutes spent in jail (for stats)
  
  // Legacy field for backward compatibility (will be migrated to cashOnHand)
  money           Int      @default(0)
  
  reputation      Int      @default(0)
  level           Int      @default(1)
  experience      Int      @default(0) // Total XP earned
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Gang {
  id           String        @id @default(uuid())
  name         String        @unique
  createdAt    DateTime      @default(now())
  members      GangMember[]
  bank         Int           @default(0)
  leaderId     String
  leader       User          @relation("GangLeader", fields: [leaderId], references: [id])
}

model GangMember {
  id           String        @id @default(uuid())
  userId       String
  gangId       String
  role         String        // "member", "co-leader", etc.
  joinedAt     DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  gang         Gang          @relation(fields: [gangId], references: [id], onDelete: Cascade)
}

model Item {
  id           String        @id @default(uuid())
  name         String
  type         String        // "tool", "consumable", "trade_good", "collectible"
  value        Int
  description  String
  rarity       String        // "common", "rare", "epic", etc.
  inventories  Inventory[]
}

model Inventory {
  id           String        @id @default(uuid())
  userId       String
  itemId       String
  quantity     Int           @default(1)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  item         Item          @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model Asset {
  id               String      @id @default(uuid())
  ownerId          String
  type             String      // "shop", "nightclub", "warehouse", etc.
  name             String
  level            Int         @default(1)
  incomeRate       Int         @default(0)
  securityLevel    Int         @default(0)
  value            Int         @default(0)
  lastIncomeTime   DateTime    @default(now())
  isForSale        Boolean     @default(false)
  owner            User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  robberyLogs      AssetRobberyLog[]
  upgrades         AssetUpgrade[]
}

model AssetRobberyLog {
  id             String      @id @default(uuid())
  assetId        String
  robberId       String
  result         String      // "success", "fail"
  stolenAmount   Int
  timestamp      DateTime    @default(now())
  asset          Asset       @relation(fields: [assetId], references: [id], onDelete: Cascade)
  robber         User        @relation(fields: [robberId], references: [id], onDelete: Cascade)
}

model AssetUpgrade {
  id           String      @id @default(uuid())
  assetId      String
  upgradeType  String      // "security", "income"
  upgradeLevel Int         @default(1)
  cost         Int
  asset        Asset       @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model Crime {
  id           String      @id @default(uuid())
  name         String
  difficulty   Int
  cooldown     Int         // in seconds
  rewardMin    Int
  rewardMax    Int
  risk         Int         // chance of failure
  jailTime     Int         // jail time on fail
  description  String
}

model Mission {
  id           String      @id @default(uuid())
  name         String
  description  String
  objectives   Json        // {type: "crime", count: 5, ...}
  rewardMoney  Int
  rewardItems  Json        // [{itemId: "id", quantity: 1}]
  statBoosts   Json        // {strength: 1}
  isDaily      Boolean     @default(false)
  userMissions UserMission[]
}

model UserMission {
  id           String      @id @default(uuid())
  userId       String
  missionId    String
  status       String      // "pending", "completed"
  progress     Json        // {current: 2, required: 5}
  startedAt    DateTime    @default(now())
  completedAt  DateTime?
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  mission      Mission     @relation(fields: [missionId], references: [id], onDelete: Cascade)
}

model ActionLog {
  id           String      @id @default(uuid())
  userId       String
  actionType   String      // "crime", "mission", "robbery", etc.
  actionId     String?     // Reference to Crime, Mission, Asset, etc.
  result       String      // "success", "fail"
  details      Json
  timestamp    DateTime    @default(now())
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Leaderboard {
  id           String      @id @default(uuid())
  category     String      // "money", "reputation", "crimes", "assets", etc.
  userId       String
  value        Int
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// === MONEY SYSTEM MODELS ===

model CryptoPrice {
  id        String   @id @default(uuid())
  coinType  String   @unique // "bitcoin", "ethereum", "dogecoin", etc.
  price     Float    // Current USD value
  change24h Float    // Percentage change in last 24 hours
  change7d  Float    // Percentage change in last 7 days
  marketCap Float    // Market capitalization
  volume24h Float    // 24 hour trading volume
  updatedAt DateTime @default(now()) @updatedAt
}

model MoneyEvent {
  id          String   @id @default(uuid())
  userId      String
  eventType   String   // "irs_audit", "market_crash", "theft", etc.
  severity    String   // "minor", "moderate", "major"
  amount      Int      // Money affected
  percentage  Float?   // Percentage of wealth affected
  moneyType   String   // "cash", "bank", "crypto", "all"
  details     Json     // Additional event data
  resolved    Boolean  @default(false)
  duration    Int?     // Hours the effect lasts (null = permanent)
  expiresAt   DateTime?
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BankTransaction {
  id            String   @id @default(uuid())
  userId        String
  transactionType String // "deposit", "withdrawal", "interest", "fee", "seizure"
  amount        Int
  fee           Int      @default(0)
  balanceBefore Int
  balanceAfter  Int
  description   String?
  timestamp     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CryptoTransaction {
  id            String   @id @default(uuid())
  userId        String
  coinType      String   // "bitcoin", "ethereum", etc.
  transactionType String // "buy", "sell", "market_change"
  amount        Float    // Amount of crypto
  pricePerCoin  Float    // Price at time of transaction
  totalValue    Int      // Total USD value
  fee           Int      @default(0)
  fromCurrency  String?  // "cash", "bank", or crypto type
  toCurrency    String?  // "cash", "bank", or crypto type
  timestamp     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MoneyEventHistory {
  id              String   @id @default(uuid())
  eventType       String   // "irs_audit", "crypto_bull_run", etc.
  affectedPlayers Int      // Number of players affected
  totalImpact     Int      // Total money gained/lost across all players
  startTime       DateTime
  endTime         DateTime?
  isActive        Boolean  @default(true)
  eventData       Json     // Configuration and results
  timestamp       DateTime @default(now())
}